// Medium-size frozen lake MDP from OpenAI Gym.

// Number of components: 1
// Max state action pairs in a MEC: 254
// Max successors per action, in a MEC: 3
// Max successors per action, in model: 3
// Min Probability in model: 0.3333333333333333

mdp

label "start" = r=7 & c=0;
label "goal"  = r=0 & c=7;
label "trap"  = r=0 & c=3 | r=1 & (c=1|c=4|c=6) | r=2 & (c=1|c=2|c=6) |
                r=3 & c=3 | r=4 & c=5 | r=5 & c=3;

module grid
  r : [0..7] init 7;
  c : [0..7] init 0;

  [n] r<7 & c>0 & c<7 -> 1/3 : (r'=r+1) & (c'=c) +
                         1/3 : (r'=r) & (c'=c-1) + 1/3 : (r'=r) & (c'=c+1);
  [n] r<7 & c=0       -> 1/3 : (r'=r+1) & (c'=c) +
                         1/3 : (r'=r) & (c'=c) + 1/3 : (r'=r) & (c'=c+1);
  [n] r<7 & c=7       -> 1/3 : (r'=r+1) & (c'=c) +
                         1/3 : (r'=r) & (c'=c-1) + 1/3 : (r'=r) & (c'=c);
  [n] r=7 & c>0 & c<7 -> 1/3 : (r'=r) & (c'=c) +
                         1/3 : (r'=r) & (c'=c-1) + 1/3 : (r'=r) & (c'=c+1);
  [n] r=7 & c=0       -> 2/3 : (r'=r) & (c'=c) + 1/3 : (r'=r) & (c'=c+1);
  [n] r=7 & c=7       -> 2/3 : (r'=r) & (c'=c) + 1/3 : (r'=r) & (c'=c-1);

  [e] r>0 & r<7 & c<7 -> 1/3 : (r'=r) & (c'=c+1) +
                         1/3 : (r'=r+1) & (c'=c) + 1/3 : (r'=r-1) & (c'=c);
  [e] r=0 & c<7       -> 1/3 : (r'=r) & (c'=c+1) +
                         1/3 : (r'=r+1) & (c'=c) + 1/3 : (r'=r) & (c'=c);
  [e] r=7 & c<7       -> 1/3 : (r'=r) & (c'=c+1) +
                         1/3 : (r'=r) & (c'=c) + 1/3 : (r'=r-1) & (c'=c);
  [e] r>0 & r<7 & c=7 -> 1/3 : (r'=r) & (c'=c) +
                         1/3 : (r'=r+1) & (c'=c) + 1/3 : (r'=r-1) & (c'=c);
  [e] r=0 & c=7       -> 2/3 : (r'=r) & (c'=c) + 1/3 : (r'=r+1) & (c'=c);
  [e] r=7 & c=7       -> 2/3 : (r'=r) & (c'=c) + 1/3 : (r'=r-1) & (c'=c);

  [s] r>0 & c>0 & c<7 -> 1/3 : (r'=r-1) & (c'=c) +
                         1/3 : (r'=r) & (c'=c-1) + 1/3 : (r'=r) & (c'=c+1);
  [s] r>0 & c=0       -> 1/3 : (r'=r-1) & (c'=c) +
                         1/3 : (r'=r) & (c'=c) + 1/3 : (r'=r) & (c'=c+1);
  [s] r>0 & c=7       -> 1/3 : (r'=r-1) & (c'=c) +
                         1/3 : (r'=r) & (c'=c-1) + 1/3 : (r'=r) & (c'=c);
  [s] r=0 & c>0 & c<7 -> 1/3 : (r'=r) & (c'=c) +
                         1/3 : (r'=r) & (c'=c-1) + 1/3 : (r'=r) & (c'=c+1);
  [s] r=0 & c=0       -> 2/3 : (r'=r) & (c'=c) + 1/3 : (r'=r) & (c'=c+1);
  [s] r=0 & c=7       -> 2/3 : (r'=r) & (c'=c) + 1/3 : (r'=r) & (c'=c-1);

  [w] r>0 & r<7 & c>0 -> 1/3 : (r'=r) & (c'=c-1) +
                         1/3 : (r'=r+1) & (c'=c) + 1/3 : (r'=r-1) & (c'=c);
  [w] r=0 & c>0       -> 1/3 : (r'=r) & (c'=c-1) +
                         1/3 : (r'=r+1) & (c'=c) + 1/3 : (r'=r) & (c'=c);
  [w] r=7 & c>0       -> 1/3 : (r'=r) & (c'=c-1) +
                         1/3 : (r'=r) & (c'=c) + 1/3 : (r'=r-1) & (c'=c);
  [w] r>0 & r<7 & c=0 -> 1/3 : (r'=r) & (c'=c) +
                         1/3 : (r'=r+1) & (c'=c) + 1/3 : (r'=r-1) & (c'=c);
  [w] r=0 & c=0       -> 2/3 : (r'=r) & (c'=c) + 1/3 : (r'=r+1) & (c'=c);
  [w] r=7 & c=0       -> 2/3 : (r'=r) & (c'=c) + 1/3 : (r'=r-1) & (c'=c);
endmodule

rewards
  r=0 & c=7 : 1;
  r=0 & c=3 | r=1 & (c=1|c=4|c=6) | r=2 & (c=1|c=2|c=6) |
              r=3 & c=3 | r=4 & c=5 | r=5 & c=3 : -1;
endrewards
