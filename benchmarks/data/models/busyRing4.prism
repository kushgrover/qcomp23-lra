// Busy-ring asynchronous arbiter.

mdp

const double p1 = 7/8; // inverter transition probability
const double p2 = 1/2; // generic transition probability
const double p3 = 1/2; // arbitration probability

label "r0" = r0;
label "r1" = r1;
label "r2" = r2;
label "r3" = r3;
label "a0" = a0;
label "a1" = a1;
label "a2" = a2;
label "a3" = a3;
label "g0" = r0 & a0;
label "g1" = r1 & a1;
label "g2" = r2 & a2;
label "g3" = r3 & a3;

module inverter
  t0 : bool init true;

  [inv] t0 = t4 -> p1 : (t0' = !t4) + (1-p1) : true;
endmodule

module client0
  r0 : bool init false;

  [u0] r0 = a0 -> p2 : (r0' = !a0) + (1-p2) : true;
endmodule

module client1 = client0 [ r0 = r1, a0 = a1, u0 = u1 ] endmodule
module client2 = client0 [ r0 = r2, a0 = a2, u0 = u2 ] endmodule
module client3 = client0 [ r0 = r3, a0 = a3, u0 = u3 ] endmodule

module mutex0
  l0 : bool init false;
  t1 : bool init false;

  [m0] !r0 & !t0 & ( l0 |  t1) -> p2 : (l0'=false) & (t1'=false) + (1-p2) : true;
  [m0] !r0 &  t0 & ( l0 | !t1) -> p2 : (l0'=false) & (t1'=true) + (1-p2) : true;
  [m0]  r0 & !t0 & (!l0 |  t1) -> p2 : (l0'=true) & (t1'=false) + (1-p2) : true;
  [m0]  r0 &  t0 &  !l0 & !t1  -> p2*p3 : (l0'=false) & (t1'=true) +
                                  p2*(1-p3) : (l0'=true) & (t1'=false) +
                                  (1-p2) : true;
endmodule

module mutex1 = mutex0 [ l0 = l1, t0 = t1, t1 = t2, r0 = r1, m0 = m1 ] endmodule
module mutex2 = mutex0 [ l0 = l2, t0 = t2, t1 = t3, r0 = r2, m0 = m2 ] endmodule
module mutex3 = mutex0 [ l0 = l3, t0 = t3, t1 = t4, r0 = r3, m0 = m3 ] endmodule

module celem0
  a0 : bool init false;

  [c0] l0=t0 & a0!=l0 -> p2 : (a0'=l0) + (1-p2) : true;
endmodule

module celem1 = celem0 [ a0 = a1, l0 = l1, t0 = t1, c0 = c1 ] endmodule
module celem2 = celem0 [ a0 = a2, l0 = l2, t0 = t2, c0 = c2 ] endmodule
module celem3 = celem0 [ a0 = a3, l0 = l3, t0 = t3, c0 = c3 ] endmodule

rewards "r"
    l0: 0;
    true: 1;
endrewards